-- ============================
-- RESET: Eliminar tablas
-- ============================
DROP TABLE IF EXISTS comp_thes;
DROP TABLE IF EXISTS pending_thes;
DROP TABLE IF EXISTS supervised;
DROP TABLE IF EXISTS thesis;
DROP TABLE IF EXISTS thesis_notes;
DROP TABLE IF EXISTS grades;
DROP TABLE IF EXISTS presentations;
DROP TABLE IF EXISTS topics;
DROP TABLE IF EXISTS professor;
DROP TABLE IF EXISTS secretary;
DROP TABLE IF EXISTS staff;
DROP TABLE IF EXISTS student;
DROP TABLE IF EXISTS user;

-- ============================
-- Tabla base de usuarios
-- ============================
CREATE TABLE user (
  id INT(10) NOT NULL, 
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  major VARCHAR(50),
  department VARCHAR(50),
  email VARCHAR(40),
  password VARCHAR(40),
  username VARCHAR(40),
  mobileNum INT(20),
  landlineNum INT(20),
  PostAddr VARCHAR(250),
  userType ENUM("student", "professor", "secretary") NOT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY (username)
);

-- ============================
-- Subtabla de estudiantes
-- ============================
CREATE TABLE student (
  id INT(8) NOT NULL,
  username VARCHAR(40) NOT NULL,
  password VARCHAR(40) NOT NULL,
  email VARCHAR(40),
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  major VARCHAR(50),
  mobileNum INT(10),
  landlineNum INT(10),
  PostAddr VARCHAR(250),
  PRIMARY KEY (id),
  UNIQUE KEY (username)
);

-- ============================
-- Personal académico (base)
-- ============================
CREATE TABLE staff (
  id INT(10) NOT NULL,
  username VARCHAR(40) NOT NULL,
  password VARCHAR(40) NOT NULL,
  email VARCHAR(40),
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  department VARCHAR(50),
  PRIMARY KEY (id),
  UNIQUE KEY (username)
);

-- ============================
-- Secretarías
-- ============================
CREATE TABLE secretary (
  sec_id INT(10) NOT NULL,
  first_name VARCHAR(50),
  email VARCHAR(40),
  department VARCHAR(50),
  PRIMARY KEY (sec_id),
  FOREIGN KEY (sec_id) REFERENCES staff(id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- ============================
-- Profesores
-- ============================
CREATE TABLE professor (
  prof_id INT(10) NOT NULL,
  first_name VARCHAR(50),
  email VARCHAR(40),
  department VARCHAR(50),
  PRIMARY KEY (prof_id),
  FOREIGN KEY (prof_id) REFERENCES staff(id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- ============================
-- Tópicos propuestos
-- ============================
CREATE TABLE topics (
  id INT AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  description TEXT NOT NULL,
  prof_id INT NOT NULL,
  FOREIGN KEY (prof_id) REFERENCES professor(prof_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- ============================
-- Tesis
-- ============================
CREATE TABLE thesis (
  stud_id INT(8) NOT NULL,
  thes_id INT(10) NOT NULL,
  keysup_id INT(10) NOT NULL,
  sup2_id INT(10),
  sup3_id INT(10),
  topic VARCHAR(255) NOT NULL,
  status ENUM("assigning", "active", "examining", "completed"),
  grade INT(3),
  assignment_date DATE,
  cancel_reason VARCHAR(255),
  assembly_number INT,
  assembly_year INT,
  completion_date DATE,
  PRIMARY KEY(stud_id, thes_id),
  UNIQUE KEY (thes_id),
  FOREIGN KEY (stud_id) REFERENCES student(id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- ============================
-- Supervisiones
-- ============================
CREATE TABLE supervised (
  sup_id INT(10) NOT NULL,
  thesis_id INT(10) NOT NULL,
  PRIMARY KEY (sup_id, thesis_id),
  FOREIGN KEY (thesis_id) REFERENCES thesis(thes_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- ============================
-- Invitaciones pendientes
-- ============================
CREATE TABLE pending_thes (
  stud_id INT(10) NOT NULL,
  invited_date DATE,
  response_date DATE,
  thes_id INT(10) NOT NULL,
  keyProf_id INT(10) NOT NULL,
  Prof2_id INT(10) NOT NULL,
  Prof3_id INT(10) NOT NULL,
  Prof2Response ENUM("Waiting", "Accepted", "Rejected"),
  Prof3Response ENUM("Waiting", "Accepted", "Rejected"),
  PRIMARY KEY (stud_id, thes_id),
  FOREIGN KEY (thes_id) REFERENCES thesis(thes_id) ON DELETE CASCADE ON UPDATE CASCADE
);


-- ============================
-- Tesis completadas
-- ============================
CREATE TABLE comp_thes (
  thesis_id INT(10) NOT NULL,
  sup_id INT(10),
  subject VARCHAR(50),
  grade INT(3),
  PRIMARY KEY (thesis_id)
);

-- ============================
-- Notas de tesis
-- ============================
CREATE TABLE thesis_notes (
  note_id INT AUTO_INCREMENT PRIMARY KEY,
  thes_id INT,
  prof_id INT,
  note TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================
-- Calificaciones
-- ============================
CREATE TABLE grades (
  grade_id INT AUTO_INCREMENT PRIMARY KEY,
  thes_id INT,
  prof_id INT,
  criteria1 INT,
  criteria2 INT,
  total_grade INT
);

-- ============================
-- Presentaciones
-- ============================
CREATE TABLE presentations (
  thes_id INT PRIMARY KEY,
  date DATE,
  time TIME,
  location VARCHAR(100)
);

-- ============================
-- TRIGGERS
-- ============================

DROP TRIGGER IF EXISTS thesis_complete;
DELIMITER $$
CREATE TRIGGER thesis_complete
AFTER UPDATE ON thesis
FOR EACH ROW
BEGIN
  IF NEW.status = "completed" THEN
    INSERT INTO comp_thes VALUES (NEW.thes_id, NEW.keysup_id, NEW.topic, NEW.grade);
  END IF;
END$$
DELIMITER ;

DROP TRIGGER IF EXISTS user_bucket;
DELIMITER $$
CREATE TRIGGER user_bucket
AFTER INSERT ON user
FOR EACH ROW
BEGIN
  IF NEW.userType = "student" THEN
    INSERT INTO student VALUES (NEW.id, NEW.username, NEW.password, NEW.email, NEW.first_name, NEW.last_name, NEW.major, NEW.mobileNum, NEW.landlineNum, NEW.PostAddr);
  END IF;
  IF NEW.userType = "professor" THEN
    INSERT INTO staff VALUES (NEW.id, NEW.username, NEW.password, NEW.email, NEW.first_name, NEW.last_name, NEW.department);
    INSERT INTO professor VALUES (NEW.id, NEW.first_name, NEW.email, NEW.department);
  END IF;
  IF NEW.userType = "secretary" THEN
    INSERT INTO staff VALUES (NEW.id, NEW.username, NEW.password, NEW.email, NEW.first_name, NEW.last_name, NEW.department);
    INSERT INTO secretary VALUES (NEW.id, NEW.first_name, NEW.email, NEW.department);
  END IF;
END$$
DELIMITER ;

DROP TRIGGER IF EXISTS Thes_activated;
DELIMITER $$
CREATE TRIGGER Thes_activated
AFTER UPDATE ON pending_thes
FOR EACH ROW
BEGIN
  DECLARE current INT DEFAULT 0;
  IF NEW.Prof2Response = 'Accepted' THEN
    SET current = current + 1;
  END IF;
  IF NEW.Prof3Response = 'Accepted' THEN
    SET current = current + 1;
  END IF;
  IF current > 0 THEN
    UPDATE thesis 
    SET status = 'active',
        sup2_id = OLD.Prof2_id,
        sup3_id = OLD.Prof3_id
    WHERE thes_id = NEW.thes_id;
  END IF;
END$$
DELIMITER ;
